import{_ as i,c as s,o as a,ae as t}from"./chunks/framework.Dh1jimFm.js";const k=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"guide/deployment/docker.md","filePath":"guide/deployment/docker.md"}'),n={name:"guide/deployment/docker.md"};function o(l,e,p,r,h,d){return a(),s("div",null,e[0]||(e[0]=[t(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">â€‹</a></h1><p>This section will help you spin up Authup as a <strong>docker</strong> container.</p><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">â€‹</a></h2><p>The following guide is based on some shared assumptions:</p><ul><li>Docker <code>v20.x</code> is <a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer">installed</a></li><li>Min. <code>2</code> cores</li><li>Min. <code>5G</code> hard disk</li><li>Up to two available ports on the host system if you want to map the services to your local machine (default: <code>3000</code> and <code>3001</code>)</li></ul><h2 id="step-1-create-a-new-project" tabindex="-1">Step. 1: Create a new project <a class="header-anchor" href="#step-1-create-a-new-project" aria-label="Permalink to &quot;Step. 1: Create a new project&quot;">â€‹</a></h2><p>Create and change into a new directory.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> authup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> authup</span></span></code></pre></div><h2 id="step-2-configuration" tabindex="-1">Step. 2: Configuration <a class="header-anchor" href="#step-2-configuration" aria-label="Permalink to &quot;Step. 2: Configuration&quot;">â€‹</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is important to mention that in the docker environment the configuration for the <code>PORT</code> option is ignored.</p></div><p>So when authup container is run, the rules are as follows:</p><ul><li>If only <strong>one service</strong> is started, it always runs on the internal port <code>3000</code> and can be mounted on another external port ( <code>-p &lt;port&gt;:3000</code>)</li></ul><p>Follow the instructions for <a href="./configuration.html">configuring</a> Authup using a configuration file or via environment variables. In case of a configuration file, place it in the root directory.</p><h2 id="step-3-boot-up" tabindex="-1">Step. 3: Boot up <a class="header-anchor" href="#step-3-boot-up" aria-label="Permalink to &quot;Step. 3: Boot up&quot;">â€‹</a></h2><p>To start each service, the following command should be executed depending on the service:</p><p><strong><code>API</code></strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> authup:/usr/src/writable</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3001:3000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  authup/authup:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server/core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><p><strong><code>UI</code></strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3000:3000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  authup/authup:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client/web</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><p>Now all should be set up, and you are ready to go ðŸŽ‰</p><p>This will lunch the following application with default settings:</p><ul><li>UI: <code>http://localhost:3000/</code></li><li>API: <code>http://localhost:3001/</code></li></ul><p>It is recommended to operate the services behind a reverse proxy. For example <a href="./nginx.html">nginx</a>.</p>`,23)]))}const u=i(n,[["render",o]]);export{k as __pageData,u as default};
