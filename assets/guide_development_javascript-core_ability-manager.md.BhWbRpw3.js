import{_ as s,o as a,c as n,R as l}from"./chunks/framework.8k-_6wIf.js";const u=JSON.parse('{"title":"Ability Manager","description":"","frontmatter":{},"headers":[],"relativePath":"guide/development/javascript-core/ability-manager.md","filePath":"guide/development/javascript-core/ability-manager.md"}'),p={name:"guide/development/javascript-core/ability-manager.md"},o=l(`<h1 id="ability-manager" tabindex="-1">Ability Manager <a class="header-anchor" href="#ability-manager" aria-label="Permalink to &quot;Ability Manager&quot;">​</a></h1><p>This package is shipped with a management system for permissions, which scales between a <strong>claim based</strong> and <strong>subject/attribute based</strong> authorization.</p><p>The data (<a href="./api-reference-system.html#abilitydescriptor">AbilityDescriptor(s)</a>) to initialize the <code>AbilityManager</code> can be serialized as json for example and shared between frontend and backend services, to provide the same features on both sides.</p><hr><p>The <strong>AbilityDescriptors</strong> can be extracted from the Payload of the <code>/token</code> endpoint response (<code>AUTHORIZATION</code> header <strong>required</strong>)</p><p><strong>ResponsePayload</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">...,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;permissions&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;condition&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;data_add&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;negation&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;power&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">999</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">...,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;permissions&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;condition&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;data_add&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;negation&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;power&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">999</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="define-abilities" tabindex="-1">Define Abilities <a class="header-anchor" href="#define-abilities" aria-label="Permalink to &quot;Define Abilities&quot;">​</a></h2><p>The class constructor accepts a <strong>collection</strong> or a <strong>single</strong> ability descriptor as argument. An ability descriptor describes the permission owned and requires at least the <code>id</code> property.</p><ul><li><strong>Condition(s)</strong>: One or many conditions can be specified using the MongoDB <a href="http://docs.mongodb.org/manual/reference/operator/query/" target="_blank" rel="noreferrer">query language</a></li><li><strong>Fields</strong>: A string array can be provided to limit the permission on specific fields of the subject.</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AbilityDescriptor, AbilityManager } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@authup/core&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbilityDescriptor</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#9ECBFF;">&#39;data_add&#39;</span><span style="color:#E1E4E8;">, condition: { size: { $lte: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> } } },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#9ECBFF;">&#39;data_edit&#39;</span><span style="color:#E1E4E8;">, fields: [</span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">] }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">abilityManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbilityManager</span><span style="color:#E1E4E8;">(items);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AbilityDescriptor, AbilityManager } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@authup/core&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">items</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbilityDescriptor</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { id: </span><span style="color:#032F62;">&#39;data_add&#39;</span><span style="color:#24292E;">, condition: { size: { $lte: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> } } },</span></span>
<span class="line"><span style="color:#24292E;">    { id: </span><span style="color:#032F62;">&#39;data_edit&#39;</span><span style="color:#24292E;">, fields: [</span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">] }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">abilityManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbilityManager</span><span style="color:#24292E;">(items);</span></span></code></pre></div><p>The list of supported operators:</p><ol><li><a href="https://docs.mongodb.com/manual/reference/operator/query/eq" target="_blank" rel="noreferrer">$eq</a> and <a href="https://docs.mongodb.com/manual/reference/operator/query/ne" target="_blank" rel="noreferrer">$ne</a><br> Check if the object value is equal to the specified value. <code>$ne</code> means <code>not $eq</code>.</li><li><a href="https://docs.mongodb.com/manual/reference/operator/query/lt" target="_blank" rel="noreferrer">$lt</a> and <a href="https://docs.mongodb.com/manual/reference/operator/query/lte" target="_blank" rel="noreferrer">$lte</a><br> Check if the object value is less than the specified value. Can be used for <code>Date</code>s, numbers and strings. <code>$lte</code> is a combination of <code>$lt</code> and <code>$eq</code>, so it&#39;s an inclusive check.</li><li><a href="https://docs.mongodb.com/manual/reference/operator/query/gt" target="_blank" rel="noreferrer">$gt</a> and <a href="https://docs.mongodb.com/manual/reference/operator/query/gte" target="_blank" rel="noreferrer">$gte</a><br> Check if the object value is greater than the specified value. Can be used for <code>Date</code>s, numbers and strings. <code>$gte</code> is a combination of <code>$gt</code> and <code>$eq</code>, so it&#39;s an inclusive check.</li><li><a href="https://docs.mongodb.com/manual/reference/operator/query/in" target="_blank" rel="noreferrer">$in</a> and <a href="https://docs.mongodb.com/manual/reference/operator/query/nin" target="_blank" rel="noreferrer">$nin</a><br> Checks if the object&#39;s property is of the specified array values. Can be used for single value and for arrays as well. If object&#39;s property is an array it checks for intersection. <code>$nin</code> means <code>not $in</code></li><li><a href="https://docs.mongodb.com/manual/reference/operator/query/all" target="_blank" rel="noreferrer">$all</a><br> Checks if the object&#39;s property contain all elements from the specified array. Can be used for arrays only.</li><li><a href="https://docs.mongodb.com/manual/reference/operator/query/size" target="_blank" rel="noreferrer">$size</a><br> Checks if the array length is equal to the specified value. Can be used for arrays only.</li><li><a href="https://docs.mongodb.com/manual/reference/operator/query/regex" target="_blank" rel="noreferrer">$regex</a><br> Allows to test object&#39;s property value using <a href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noreferrer">regular expression</a>. Can be used for strings only.</li><li><a href="https://docs.mongodb.com/manual/reference/operator/query/exists" target="_blank" rel="noreferrer">$exists</a><br> Checks if the property exists in the object.</li><li><a href="https://docs.mongodb.com/manual/reference/operator/query/elemMatch" target="_blank" rel="noreferrer">$elemMatch</a><br> Checks nested elements shape. Use <code>$elemMatch</code> operator to specify multiple criteria on the elements of an array such that at least one array element satisfies all the specified criteria. If you specify only a single condition in the <code>$elemMatch</code> expression, <code>$elemMatch</code> is not necessary. See <a href="https://docs.mongodb.com/manual/tutorial/query-arrays/#specify-multiple-criteria-for-array-elements" target="_blank" rel="noreferrer">Specify Multiple Conditions for Array Elements</a> for details.</li></ol><h2 id="check" tabindex="-1">Check <a class="header-anchor" href="#check" aria-label="Permalink to &quot;Check&quot;">​</a></h2><p>To check if a permission is owned in general without any restrictions (conditions or fields), use the <code>has()</code> method of the class instance.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AbilityDescriptor, AbilityManager } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@authup/core&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbilityDescriptor</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#9ECBFF;">&#39;data_add&#39;</span><span style="color:#E1E4E8;">, condition: { size: { $lte: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> } } },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#9ECBFF;">&#39;data_edit&#39;</span><span style="color:#E1E4E8;">, fields: [</span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">] }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">abilityManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbilityManager</span><span style="color:#E1E4E8;">(items);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(abilityManager.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data_add&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(abilityManager.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data_drop&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AbilityDescriptor, AbilityManager } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@authup/core&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">items</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbilityDescriptor</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { id: </span><span style="color:#032F62;">&#39;data_add&#39;</span><span style="color:#24292E;">, condition: { size: { $lte: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> } } },</span></span>
<span class="line"><span style="color:#24292E;">    { id: </span><span style="color:#032F62;">&#39;data_edit&#39;</span><span style="color:#24292E;">, fields: [</span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">] }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">abilityManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbilityManager</span><span style="color:#24292E;">(items);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(abilityManager.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data_add&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(abilityManager.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data_drop&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span></code></pre></div><h2 id="verify" tabindex="-1">Verify <a class="header-anchor" href="#verify" aria-label="Permalink to &quot;Verify&quot;">​</a></h2><p>To verify a permission <strong>with</strong> condition and field restriction, use the <code>verify()</code> method of the class instance.</p><h2 id="verify-conditions" tabindex="-1">Verify Conditions <a class="header-anchor" href="#verify-conditions" aria-label="Permalink to &quot;Verify Conditions&quot;">​</a></h2><p>Conditions will be evaluated, if an object (subject) is provided as <strong>second</strong> argument to the <code>verify()</code> method.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AbilityDescriptor, AbilityManager } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@authup/core&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">size</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbilityDescriptor</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#9ECBFF;">&#39;data_add&#39;</span><span style="color:#E1E4E8;">, condition: { size: { $lte: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> } } }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">abilityManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbilityManager</span><span style="color:#E1E4E8;">(items);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> exampleData </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value: </span><span style="color:#9ECBFF;">&#39;0123456789&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    size: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(abilityManager.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data_add&#39;</span><span style="color:#E1E4E8;">, exampleData));</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">exampleData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value: </span><span style="color:#9ECBFF;">&#39;01234&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    size: </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(abilityManager.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data_add&#39;</span><span style="color:#E1E4E8;">, exampleData));</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AbilityDescriptor, AbilityManager } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@authup/core&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">size</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">items</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbilityDescriptor</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { id: </span><span style="color:#032F62;">&#39;data_add&#39;</span><span style="color:#24292E;">, condition: { size: { $lte: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> } } }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">abilityManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbilityManager</span><span style="color:#24292E;">(items);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> exampleData </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    value: </span><span style="color:#032F62;">&#39;0123456789&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    size: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(abilityManager.</span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data_add&#39;</span><span style="color:#24292E;">, exampleData));</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">exampleData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    value: </span><span style="color:#032F62;">&#39;01234&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    size: </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(abilityManager.</span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data_add&#39;</span><span style="color:#24292E;">, exampleData));</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="verify-fields" tabindex="-1">Verify Fields <a class="header-anchor" href="#verify-fields" aria-label="Permalink to &quot;Verify Fields&quot;">​</a></h2><p>To verify if the permission applies on a specific field of an object (subject), provide the field name as <strong>third</strong> argument to the <code>verify()</code> method.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AbilityDescriptor, AbilityManager } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@authup/core&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">size</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbilityDescriptor</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#9ECBFF;">&#39;data_edit&#39;</span><span style="color:#E1E4E8;">, fields: [</span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">] }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">abilityManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbilityManager</span><span style="color:#E1E4E8;">(items);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> exampleData </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value: </span><span style="color:#9ECBFF;">&#39;01234&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    size: </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(abilityManager.</span><span style="color:#B392F0;">can</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data_edit&#39;</span><span style="color:#E1E4E8;">, exampleData, </span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(abilityManager.</span><span style="color:#B392F0;">can</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data_edit&#39;</span><span style="color:#E1E4E8;">, exampleData, </span><span style="color:#9ECBFF;">&#39;size&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AbilityDescriptor, AbilityManager } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@authup/core&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">size</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">items</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbilityDescriptor</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { id: </span><span style="color:#032F62;">&#39;data_edit&#39;</span><span style="color:#24292E;">, fields: [</span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">] }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">abilityManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbilityManager</span><span style="color:#24292E;">(items);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> exampleData </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    value: </span><span style="color:#032F62;">&#39;01234&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    size: </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(abilityManager.</span><span style="color:#6F42C1;">can</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data_edit&#39;</span><span style="color:#24292E;">, exampleData, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(abilityManager.</span><span style="color:#6F42C1;">can</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data_edit&#39;</span><span style="color:#24292E;">, exampleData, </span><span style="color:#032F62;">&#39;size&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span></code></pre></div>`,24),e=[o];function t(r,c,i,y,E,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
