import{_ as s,c as i,o,ae as a}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"Permissions & Polices","description":"","frontmatter":{},"headers":[],"relativePath":"guide/user/permissions-and-policies.md","filePath":"guide/user/permissions-and-policies.md"}'),n={name:"guide/user/permissions-and-policies.md"};function r(t,e,c,l,p,d){return o(),i("div",null,e[0]||(e[0]=[a('<h1 id="permissions-polices" tabindex="-1">Permissions &amp; Polices <a class="header-anchor" href="#permissions-polices" aria-label="Permalink to &quot;Permissions &amp; Polices&quot;">​</a></h1><p>In Authup, permissions and policies are two central concepts for controlling access within the system. While permissions represent the basic ability to perform an action, policies enable detailed control over the conditions under which a permission is actually granted.</p><h2 id="permissions" tabindex="-1">Permissions <a class="header-anchor" href="#permissions" aria-label="Permalink to &quot;Permissions&quot;">​</a></h2><p>A permission fundamentally describes an action on a subject/object. It exists independently of roles and users.</p><p>Examples:</p><ul><li><code>user_read</code></li><li><code>user_update</code></li></ul><p>However, these permissions alone are not sufficient to enable context-dependent access controls. This is where policies come into play.</p><h2 id="policies" tabindex="-1">Policies <a class="header-anchor" href="#policies" aria-label="Permalink to &quot;Policies&quot;">​</a></h2><p>A policy is a rule that defines under which conditions a permission is granted.</p>',9)]))}const h=s(n,[["render",r]]);export{u as __pageData,h as default};
